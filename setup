#!/bin/bash

# for tracing
# set -x

echo "This script assumes it lives in ~/workspace/dotfiles"
echo "This installs a lot of things. Hit control+c if you want to quit"

if [ -z $NO_SLEEP ]; then
  sleep 5
else
  echo "No sleep 'til Brooklyn"
fi

ORIGINAL_PATH=`pwd`

echo ""
echo "* Press enter to use current values *"
if [ -z "${GIT_USER_NAME}" ]; then
  echo "What name do you want associated with git commits?"
  echo "Currently:" `git config --get user.name`
  read GIT_USER_NAME

  if [ -z "${GIT_USER_NAME}" ]; then
    GIT_USER_NAME=`git config --get user.name`
  fi
fi

if [ -z "${GIT_USER_EMAIL}" ]; then
  echo "What email address do you want associated with git commits?"
  echo "Currently:" `git config --get user.email`
  read GIT_USER_EMAIL

  if [ -z "${GIT_USER_EMAIL}" ]; then
    GIT_USER_EMAIL=`git config --get user.email`
  fi
fi

CHROME_EXTENSION_PATH="$HOME/Library/Application\ Support/Google/Chrome/External\ Extensions"

# from https://askubuntu.com/questions/1063331/how-to-install-google-chrome-extensions-though-terminal
# also helpful https://developer.chrome.com/extensions/external_extensions
install_chrome_extension () {
  preferences_dir_path="$CHROME_EXTENSION_PATH"
  pref_file_path="$preferences_dir_path/$1.json"
  upd_url="https://clients2.google.com/service/update2/crx"

  echo "OK do the dirty"
  echo $preferences_dir_path

  echo "OK make the dir"
  mkdir -p "$preferences_dir_path"

  echo "List the dir"
  ls "$preferences_dir_path"

  
  echo "{" > "$pref_file_path"
  echo "  \"external_update_url\": \"$upd_url\"" >> "$pref_file_path"
  echo "}" >> "$pref_file_path"
  echo Added \""$pref_file_path"\" ["$2"]
}

# install_chrome_extension "glnpjglilkicbckjpbgcfkogebgllemb" "okta browser plugin"
# install_chrome_extension "hdokiejnpimakedhajhdlcegeplioahd" "lastpass"
# install_chrome_extension "padekgcemlokbadohgkifijomclgjgif" "switchyomega"

# No need to install git, because that's how this file got here

if [ -d ~/Applications/iTerm.app ]; then
  echo "iTerm is already installed"
else
  echo "Installing iTerm"
  curl -O https://iterm2.com/downloads/stable/iTerm2-3_3_6.zip
  unzip iTerm2-3_3_6.zip
  mv iTerm.app/ ~/Applications/
  rm iTerm2-3_3_6.zip
fi


# https://www.atlassian.com/blog/git/advanced-git-aliases
# https://github.com/billmei/dotfiles/blob/master/.gitconfig
echo "Customizing git config"
git config --global commit.template ~/workspace/dotfiles/git/gitmessage

git config --global alias.co checkout
git config --global alias.forget '!git add -A && git checkout -f'

git config --global push.default current

git config --global user.name "$GIT_USER_NAME"
git config --global user.email $GIT_USER_EMAIL


# check if the ssh config file is being included
# per https://superuser.com/questions/247564/is-there-a-way-for-one-ssh-config-file-to-include-another-one
# I need OpenSSH 7.3p1 which can be tested with "ssh -V" but I don't feel like parsing it -- most modern
# systems are going to have it.

# Check for "Include ~/workspace/dotfiles/ssh/config" and include it if not there


echo "Checking Homebrew"
brew --version
if [ $? -eq 0 ]; then
  echo "Homebrew already installed"
else
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# I should look at using the unattended brew install, since this approach requires running
# the following commands before brew can be used, so the rest of the install fails the
# first time until it's in the path, then it starts to work again
# 
# (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> /Users/trosenbl/.zprofile
# eval "$(/opt/homebrew/bin/brew shellenv)"


echo "export HOMEBREW_NO_AUTO_UPDATE=1" >> ~/.zshrc
echo "source ~/workspace/dotfiles/bash/source_me" >> ~/.zshrc

# This is to deal with conservative outbound proxies that block brew's UA

cd /opt/homebrew/Library/Homebrew
# Reset brew in case it broke (brew can still update as it does it through git)
git reset HEAD --hard
# update homebrew repository (this will reset changes as well)
/opt/homebrew/bin/brew update
# patch brew script to force curl user agent to be used
cat brew.sh | sed 's/^HOMEBREW_USER_AGENT=.*//' | sed 's/^HOMEBREW_USER_AGENT_CURL=.*/HOMEBREW_USER_AGENT_CURL="${curl_name_and_version\/\/ \/\/}"\
HOMEBREW_USER_AGENT="${curl_name_and_version\/\/ \/\/}"/' > brew2.sh
# replace original file
chmod +x brew2.sh
rm brew.sh
mv brew2.sh brew.sh
cd






echo "Checking VSCode"
code --version
if [ $? -eq 0 ]; then
  echo "VSCode is installed."
else
  echo "Installing VSCode"
  brew install visual-studio-code --cask
fi

# If there's a version upgrade to be done,
# the install-extension command will interactively
# prompt for upgrade instructions.
echo "Installing VSCode extensions..."
code --install-extension rebornix.ruby
code --install-extension karunamurti.haml
code --install-extension knisterpeter.vscode-github



# This may require updating the path. Might be ~/Library/Python/3.7/bin/ or whereever
# that Python is installing binaries.
# echo "Checking AWS CLI"
# aws --version
# if [ $? -eq 0 ]; then
#   echo "AWS CLI is installed. Skipping"
# else
#   curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
#   sudo installer -pkg AWSCLIV2.pkg -target /
#   rm AWSCLIV2.pkg
# fi

echo "Checking jq"
jq --version
if [ $? -eq 0 ]; then
  echo "jq is already installed"
else
  brew install jq
fi


brew install kubectx


cd ${ORIGINAL_PATH}

./osx/setup.sh